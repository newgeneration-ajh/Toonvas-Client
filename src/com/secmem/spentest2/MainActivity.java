package com.secmem.spentest2;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.secmem.network.MobileClient;
import com.secmem.network.ServerInfo;
import com.secmem.packet.PacketData;
import com.secmem.packet.PacketType;
import com.secmem.packet.RecvThread;
import com.secmem.packet.SendManager;
import com.secmem.packet.SendThread;
import com.skp.openplatform.android.sdk.oauth.OAuthInfoManager;
import com.skp.openplatform.android.sdk.oauth.OAuthListener;
import com.skp.openplatform.android.sdk.oauth.PlanetXOAuthException;
import com.skplanet.openplatform.testproject.Init;


@SuppressLint("HandlerLeak")
public class MainActivity extends Activity implements OnClickListener {
	
	//Sk Planet Api
	private com.skplanet.openplatform.testproject.UserManager mUserManager = new com.skplanet.openplatform.testproject.UserManager();
	private Init mInit = new Init();
	
	private ImageButton 	m_btnLogin 	= null;
	private PacketData m_SendData = null;
	private Context m_Context = null;
	
	private SendThread m_SendThread;
	private RecvThread m_RecvThread;
	
	private String m_ID = null;
	private String m_PW = null;
	
	public static ProgressBar m_LoginProgress = null;
	public static int m_loginCount = 0;
	
	
	private boolean m_Flag = false;

	@Override
	protected void onCreate ( Bundle savedInstanceState ) {
		
		super.onCreate( savedInstanceState );
		setContentView( R.layout.activity_main );
		
		m_btnLogin = ( ImageButton ) findViewById( R.id.btnLogin );
		m_Context = this;
		
		m_btnLogin.setOnClickListener( this );
		
		MobileClient.getInstance();
		
		m_SendThread = new SendThread();
		m_RecvThread = new RecvThread(m_Handler);
		
		m_SendThread.threadStart();
		m_RecvThread.threadStart();
		Log.d("mLog", "threadStart");
		
		mInit.initOAuthData();

		try {
			Log.d("mLog", "login1");
			OAuthInfoManager.login(this, oauthlis);
		} catch (PlanetXOAuthException e2) {
			Log.d("mLog", "login2");
			e2.printStackTrace();
		}
		
	}
	
	OAuthListener oauthlis = new OAuthListener() {

		@Override
		public void onError(String errorMessage) {
			System.out.println("onError : " + errorMessage);
		}

		@Override
		public void onComplete(String message) {
			System.out.println("onComplete : " + message);
		}
	};
	
	@Override
	protected void onStart() {
		super.onStart();
		if ( m_Flag == false )
		{
			Intent intent = new Intent ( MainActivity.this , IntroActivity.class);
			startActivity(intent);
			m_Flag = true;
		}
		
	};
	
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		RecvThread.setHandler(m_Handler);
	}
	
	@Override
	protected void onDestroy() {
		Log.d("mLog", "onDestroy");
		OAuthInfoManager.logout(this, oauthlis);
		super.onDestroy();
	}
	@Override
	public void onClick ( View v ) {
		int sel = v.getId();
		switch ( sel ) {
		case R.id.btnLogin:
			Log.d("mLog", "Login CLick");
			
				new Thread (new Runnable() { 	
					
					@Override
					public void run() {
						
						Log.d("mLog", "id run");
						try {
							JSONObject jobj = mUserManager.requestSync().getJSONObject("profile");
							m_ID = jobj.getString("userName");
							m_PW = jobj.getString("userId");
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						ByteBuffer sBuffer = ByteBuffer.allocate(32);
						sBuffer.order(ByteOrder.LITTLE_ENDIAN);
						
						byte[] arrZero = new byte[16];
						for (int i = 0; i < 16; i++) {
							arrZero[i] = 0;
						}
						
						try {
							sBuffer.put(m_ID.getBytes("KSC5601"));
							sBuffer.put(arrZero, 0, 16 - m_ID.getBytes().length);
							sBuffer.put(m_PW.getBytes("KSC5601"));
							sBuffer.put(arrZero, 0, 16 - m_PW.getBytes().length);
						} catch (UnsupportedEncodingException e) {
							e.printStackTrace();
						}

						sBuffer.flip(); // 버퍼포인터를 처음으로 돌린다

						// 패킷 전송 ... SendPacket()에서 헤더를 붙여야 하기때문에 다시 바이트로 변환
						byte[] sBuf = sBuffer.array();
						
						m_SendData = new PacketData ( PacketType.REQ_LOGIN , sBuf , 32 );
						
						SendManager.pushQueue(m_SendData);
						
						m_SendData = null;
						
						Thread t = new Thread(new Runnable() {
						    public void run() {
						    	while(true){
						    	
						    	try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}
						    		m_loginCount++;
						    	
						    		if(m_loginCount == 10){
						    			Message msg = new Message();
						    			msg.what = 200;
						    			m_Handler.sendMessage( msg );
						    			break;
						    		}
						    	}
						    }
						});
						t.start();
					}
				}).start();
				
				
		
			
			break;
		default:
				break;
		}
	}


	@Override
	public void onBackPressed() {
		m_Flag = false;
		finish();
	}
	
	private void conncetSocket(final Context _context )   throws IOException {
		new Thread(new Runnable() {
			Context context = _context;
			
			@Override
			public void run() {
				try {
						MobileClient.getInstance().initialize(context);
						MobileClient.getInstance().ConnectRemote(ServerInfo.IP_ADDR, ServerInfo.PORT_NUM);
						MobileClient.getInstance().invoker();	
				} catch (Exception e) {
					e.printStackTrace();
				}

			}
		}).start();
	}
	
	final Handler	m_Handler	= new Handler( ) {
		@Override
		public void handleMessage ( Message msg )
		{
			if ( msg.what == PacketType.RET_LOGIN )
			{
				Intent intent = new Intent(m_Context, RoomListActivity.class);
				intent.putExtra("ID", m_ID);
				startActivity(intent);
			}
			else if ( msg.what == PacketType.RET_LOG_FAIL )
			{
				Toast.makeText(m_Context, "로그인에 실패하셨습니다.", Toast.LENGTH_LONG).show();
			}
			else if ( msg.what == 200 )
			{
				Toast.makeText(m_Context, "서버와의 연결이 실패하였습니다.", 0).show();
			}
		}
		
	};
	

	
}
